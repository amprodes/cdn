{"version":3,"file":"chat-footer.js","sourceRoot":"","sources":["../../../src/components/chat-footer/chat-footer.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Component representing the chat header.\n */\nimport { Component, h, State } from '@stencil/core';\nimport { state } from '../../store/store';\nimport { Sender } from '../chat-component/enums/sender';\n\n/**\n * Component representing the chat footer.\n */\n@Component({\n  tag: 'chat-footer',\n  styleUrl: 'chat-footer.scss',\n  shadow: true\n})\nexport class ChatFooter {\n  @State() value: string;\n  @State() isElementVisible = true;\n\n  /**\n   * Lifecycle method called when the component is connected to the DOM.\n   * Adds a window resize event listener and calls the `checkWindowSize` method.\n   */\n  connectedCallback() {\n    window.addEventListener('resize', this.checkWindowSize);\n    this.checkWindowSize();\n  }\n\n  /**\n   * Lifecycle method called when the component is disconnected from the DOM.\n   * Removes the window resize event listener.\n   */\n  disconnectedCallback() {\n    window.removeEventListener('resize', this.checkWindowSize);\n  }\n\n  /**\n   * Checks the window size and updates the `isElementVisible` property based on the window width.\n   * If the window width is greater than 768px, sets `isElementVisible` to `false`.\n   * Otherwise, sets it to `true`.\n   */\n  private checkWindowSize = () => {\n    const windowWidth = window.innerWidth;\n\n    if (windowWidth > 768) {\n      state.isMobile = false;\n    } else {\n      state.isMobile = true\n    }\n  };\n\n  /**\n   * Handles the form submission event.\n   * Prevents the default form submission behavior.\n   * If the value is not empty, adds a new message to the state's messages array\n   * and clears the input field.\n   * @param {Event} e - The form submission event.\n   */\n  private handleSubmit = (e: Event) => {\n    e.preventDefault();\n    if (this.value !== '') {\n      state.messages = [\n        ...state.messages,\n        { text: this.value, sender: Sender.USER, id: state.messages.length + 1 }\n      ];\n      this.value = '';\n\n      const chatElement = document.querySelector('#chat-element');\n      if (chatElement instanceof HTMLElement) {\n        window.scrollTo(0, chatElement.scrollHeight);\n      }\n    }\n  };\n\n  /**\n   * Handles the input change event.\n   * Updates the `value` property with the new input value.\n   * @param {Event} event - The input change event.\n   */\n  private handleChange = (event: Event) => {\n    this.value = (event.target as HTMLInputElement).value;\n  };\n\n  /**\n   * Determines whether to show the chips based on the current state.\n   * Returns `true` if the state is not mobile or if the user is not currently writing a message.\n   * Returns `false` otherwise.\n   * @returns {boolean} A boolean indicating whether to show the chips.\n   */\n  private showChips(): boolean {\n    if (state.isMobile) {\n      if (state.isWritting) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private handleFocus = () => {\n    state.isWritting = true;\n  };\n\n  private handleBlur = () => {\n    state.isWritting = false;\n  };\n\n  render() {\n    const buttonClass = this.value !== '' ? 'dav-footer__icon' : 'dav-footer__icon__inactive';\n\n    return (\n      <div class=\"padding-x\">\n        {this.showChips() && (\n          <dav-chip-list>\n            <dav-chip-item text=\"Desbloquear mi clave virtual\"></dav-chip-item>\n          </dav-chip-list>\n        )}\n        <form onSubmit={this.handleSubmit} class=\"dav-footer noPadding\">\n          <div class=\"dav-textField\">\n            <input\n              autoComplete=\"off\"\n              type=\"text\"\n              value={this.value}\n              placeholder=\"Mensaje\"\n              onFocus={this.handleFocus} // Reference the onFocus event handler\n              onBlur={this.handleBlur} // Reference the onBlur event handler\n              onInput={this.handleChange}\n            />\n          </div>\n\n          <button class={buttonClass} type=\"submit\">\n            <img class=\"dav-footer__icon__img-send\" src=\"../../assets/icons/extra-icons/icon-send-message.svg\" />\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n"]}